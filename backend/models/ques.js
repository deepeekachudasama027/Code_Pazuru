const mongoose = require("mongoose");

const quesSchema = new mongoose.Schema({
  level: {
    type: String,
    required: true,
    trim: true,
  },
  code: [String],
  order: [String],
});

module.exports = Question = mongoose.model("question", quesSchema);
// Question.insertMany([
//   {
//     level: "1",
//     order: [
//       "<html>",
//       "<head>",
//       "<meta charset='UTF-8'>",
//       "<title>Type Ahead ðŸ‘€</title>",
//       "<link rel='stylesheet' href='style.css'>",
//       "</head>",
//       "<body>",
//       "<form class='search-form'>",
//       "<input type='text' class='search' placeholder='City or State'>",
//       "<li>Filter for a city</li>",
//       "<li>or a state</li>",
//       "</ul>",
//       "</form>",
//       "<script src='./index.js'>",
//       "</script>",
//       "</body>",
//       "</html>",
//     ],
//     code: [
//       "<li>Filter for a city</li>",
//       "<html>",
//       "</ul>",
//       "<form class='search-form'>",
//       "<li>or a state</li>",
//       "<script src='./index.js'>",
//       "<input type='text' class='search' placeholder='City or State'>",
//       "<head>",
//       "</head>",
//       "<title>Type Ahead ðŸ‘€</title>",
//       "<body>",
//       "<meta charset='UTF-8'>",
//       "</body>",
//       "</script>",
//       "</html>",
//       "</form>",
//       "<link rel='stylesheet' href='style.css'>",
//     ],
//   },
// ]);

// Question.insertMany([
//   {
//     level: "2",
//     order: [
//       "int t(int x, int y)",
//       "{ \n int z = 1;",
//       "while (y > 0) ",
//       "{ \n if (y % 2 == 0)",
//       "{ \n x = x * x;",
//       " y = y / 2; \n }",
//       "else \n {",
//       "z = z * x;",
//       " y = y - 1;    \n } \n }",
//       "return z; \n }",
//     ],
//     code: [
//       "{ \n x = x * x;",
//       " y = y / 2; \n }",
//       "z = z * x;",
//       " y = y - 1;    \n } \n }",
//       "else \n {",
//       "{ \n if (y % 2 == 0)",
//       "return z; \n }",
//       "int t(int x, int y)",
//       "{ \n int z = 1;",
//       "while (y > 0) ",
//     ],
//   },
// ]);

// Question.insertMany([
//   {
//     level: "3",
//     order: [
//       "onMouseMove = (e) => \n {",
//       "e.preventDefault();",
//       "let targetRect = target.getBoundingClientRect();",
//       "let x = e.pageX - targetRect.left + 10;",
//       "if (x > targetRect.width) \n { \n x = targetRect.width \n};",
//       "else  if (x < 0) \n { x = 0 \n};",
//       "btn.x = x - 10; \n btn.style.left = btn.x + 'px'; \n let percentPosition = (btn.x + 10) / targetRect.width * 100;",
//       "color.style.width = percentPosition + '%'; \n tooltip.style.left = btn.x - 5 + 'px'; \n tooltip.style.opacity = 1; \n tooltip.textContent = Math.round(percentPosition) + '%';",
//       " };",
//     ],

//     code: [
//       "btn.x = x - 10; \n btn.style.left = btn.x + 'px'; \n let percentPosition = (btn.x + 10) / targetRect.width * 100;",
//       "if (x > targetRect.width) \n { \n x = targetRect.width \n};",
//       " };",
//       "let targetRect = target.getBoundingClientRect();",
//       "onMouseMove = (e) => \n {",
//       "e.preventDefault();",
//       "color.style.width = percentPosition + " %
//         "; \n tooltip.style.left = btn.x - 5 + 'px'; \n tooltip.style.opacity = 1; \n tooltip.textContent = Math.round(percentPosition) + '%';",
//       "else  if (x < 0) \n { x = 0 \n};",
//       "let x = e.pageX - targetRect.left + 10;",
//     ],
//   },
// ]);

// Question.insertMany([
//   {
//     level: "4",
//     order: [
//       "try \n {",
//       "const user = await User.findOne({ email }).select('+password');",
//       "if (!user)",
//       "return next(new ErrorResponse('user doesn't exist', 401));",
//       "const isMatch = await user.matchPassword(password);",
//       "if (!isMatch) ",
//       "return next(new ErrorResponse('Invalid credentials', 401));",
//       "sendToken(user, 200, res);",
//       "} \n catch (err) \n {",
//       "next(err); \n }",
//     ],
//     code: [
//       "return next(new ErrorResponse('Invalid credentials', 401));",
//       "} \n catch (err) \n {",
//       "if (!isMatch) ",
//       "next(err); \n }",
//       "sendToken(user, 200, res);",
//       "try \n {",
//       "if (!user)",
//       "const isMatch = await user.matchPassword(password);",
//       "const user = await User.findOne({ email }).select('+password');",
//       "return next(new ErrorResponse('user doesn't exist', 401));",
//     ],
//   },
// ]);

// Question.insertMany([
//   {
//     level: "5",
//     order: [
//       "function exportSaveState() \n {",
//       "var state = { \n };",
//       "if(gameState == 1 || gameState == -1 || (gameState === 0 && localStorage.getItem('saveState') !== undefined)) \n { \n state =",
//       "hex: $.extend(true, {}, MainHex), \n blocks: $.extend(true, [], blocks),\n score: score, \n	wavegen: waveone, \n gdx: gdx, \n	gdy: gdy, \n",
//       "comboTime:settings.comboTime \n	}; \n	state.hex.blocks.map(function(a) \n { \n	for (var i = 0; i < a.length; i++) \n { \n",
//       "a[i] = $.extend(true, {}, a[i]); \n }\n a.map(descaleBlock);\n	});",
//       "for (var i = 0; i < state.blocks.length; i++) \n {",
//       "state.blocks[i] = $.extend(true, {}, state.blocks[i]);",
//       "} \n state.blocks.map(descaleBlock); \n	} \n }",
//     ],

//     code: [
//       "for (var i = 0; i < state.blocks.length; i++) \n {",
//       "a[i] = $.extend(true, {}, a[i]); \n }\n a.map(descaleBlock);\n	});",
//       "} \n state.blocks.map(descaleBlock); \n	} \n }",
//       "hex: $.extend(true, {}, MainHex), \n blocks: $.extend(true, [], blocks),\n score: score, \n	wavegen: waveone, \n gdx: gdx, \n	gdy: gdy, \n",
//       "var state = { \n };",
//       "state.blocks[i] = $.extend(true, {}, state.blocks[i]);",
//       "function exportSaveState() \n {",
//       "comboTime:settings.comboTime \n	}; \n	state.hex.blocks.map(function(a) \n { \n	for (var i = 0; i < a.length; i++) \n { \n",
//       "if(gameState == 1 || gameState == -1 || (gameState === 0 && localStorage.getItem('saveState') !== undefined)) \n { \n state =",
//     ],
//   },
// ]);

// Question.insertMany([
//   {
//     level: "6",
//     order: [
//       "namespace draco \n {",
//       "class KeyframeAnimationEncodingTest : public ::testing::Test \n { \n protected: ",
//       "KeyframeAnimationEncodingTest() \n { \n }",
//       "bool CreateAndAddTimestamps(int32_t num_frames) \n {",
//       "timestamps_.resize(num_frames);",
//       "for (int i = 0; i < timestamps_.size(); ++i)",
//       "timestamps_[i] = static_cast<draco::KeyframeAnimation::TimestampType>(i);",
//       "return keyframe_animation_.SetTimestamps(timestamps_); \n } \n int32_t CreateAndAddAnimationData(int32_t num_frames, \n uint32_t num_components) \n { \n",
//       "animation_data_.resize(num_frames * num_components);",
//       "for (int i = 0; i < animation_data_.size(); ++i)",
//       "animation_data_[i] = static_cast<float>(i);",
//       " return keyframe_animation_.AddKeyframes(draco::DT_FLOAT32, num_components, \n animation_data_); \n }",
//     ],
//     code: [
//       "animation_data_.resize(num_frames * num_components);",
//       "return keyframe_animation_.SetTimestamps(timestamps_); \n } \n int32_t CreateAndAddAnimationData(int32_t num_frames, \n uint32_t num_components) \n { \n",
//       "timestamps_[i] = static_cast<draco::KeyframeAnimation::TimestampType>(i);",
//       "for (int i = 0; i < animation_data_.size(); ++i)",
//       "animation_data_[i] = static_cast<float>(i);",
//       "class KeyframeAnimationEncodingTest : public ::testing::Test \n { \n protected: ",
//       " return keyframe_animation_.AddKeyframes(draco::DT_FLOAT32, num_components, \n animation_data_); \n }",
//       "namespace draco \n {",
//       "bool CreateAndAddTimestamps(int32_t num_frames) \n {",
//       "for (int i = 0; i < timestamps_.size(); ++i)",
//       "KeyframeAnimationEncodingTest() \n { \n }",
//       "timestamps_.resize(num_frames);",
//     ],
//   },
// ]);

// Question.insertMany([
//   {
//     level: "7",
//     order: [
//       "<head>",
//       "<meta charset='UTF-8'>",
//       "<title> BlogIN </title>",
//       "<link rel='icon' href='logo.png' type='image/png' />",
//       "<link rel='stylesheet' href='../css/main.css'>",
//       "</head>",
//       "<body>",
//       "<nav class='navbar'>",
//       "<div class='navbar-brand'>",
//       "<img src='logo.png' alt='' style='width: 120px;height: 120px'> \n </div>",
//       "<div class='navbar-links'>",
//       "<ul>",
//       "<div class='navbar-links'> \n <li><a href='/logout'>Logout</a></li>",
//       "</ul>\n </div>",
//       "</nav>",
//       "<div class='main'>",
//       "<div class='container'>",
//       "<p style='font-size:50px;padding-top:40px;font-weight:bold'>Publish your Passions, your way <br> Let's started   Blogging !</p>",
//       "<p style='font-size:50px;padding-top:40px;font-weight:bold'>Publish your Passions, your way <br> Let's started   Blogging !</p>",
//       "</center>",
//       "</div> \n </div>",
//       "<script src='./index.js'>",
//       "</script>",
//       "</body>",
//     ],
//     code: [
//       "</head>",
//       "</script>",
//       "<body>",
//       "<div class='navbar-brand'>",
//       "<div class='navbar-links'>",
//       "</body>",
//       "<link rel='icon' href='logo.png' type='image/png' />",
//       "</center>",
//       "<nav class='navbar'>",
//       "</ul>\n </div>",
//       "<ul>",
//       "<script src='./index.js'>",
//       "<link rel='stylesheet' href='../css/main.css'>",
//       "<div class='main'>",
//       "<div class='navbar-links'> \n <li><a href='/logout'>Logout</a></li>",
//       "<title> BlogIN </title>",
//       "<div class='container'>",
//       "</nav>",
//       "<img src='logo.png' alt='' style='width: 120px;height: 120px'> \n </div>",
//       "</head>",
//       "<p style='font-size:50px;padding-top:40px;font-weight:bold'>Publish your Passions, your way <br> Let's started   Blogging !</p>",
//       "<p style='font-size:50px;padding-top:40px;font-weight:bold'>Publish your Passions, your way <br> Let's started   Blogging !</p>",
//       "<meta charset='UTF-8'>",
//       "</div> \n </div>",
//       "<nav class='navbar'>",
//     ],
//   },
// ]);

// Question.insertMany([
//   {
//     level: "8",
//     order: [
//       "while(*e != '\0') \n {",
//       "if(isalnum(*e))",
//       "printf('%c',*e); \n else if(*e == '(')",
//       "push(*e);",
//       "else if(*e == ')') \n {",
//       " while((x = pop()) != '(')",
//       "printf('%c', x);}",
//       "else \n {",
//       "while(priority(stack[top]) >= priority(*e))",
//       "printf('%c',pop());",
//       "push(*e); \n }",
//       "e++; \n  }",
//     ],
//     code: [
//       "else \n {",
//       "while(priority(stack[top]) >= priority(*e))",
//       " while((x = pop()) != '(')",
//       "printf('%c',*e); \n else if(*e == '(')",
//       "if(isalnum(*e))",
//       "push(*e);",
//       "printf('%c',pop());",
//       "push(*e); \n }",
//       "e++; \n  }",
//       "while(*e != '\0') \n {",
//       "printf('%c', x);}",
//       "else if(*e == ')') \n {",
//     ],
//   },
// ]);

// Question.insertMany([
//   {
//     level: "9",
//     order: [
//       "var hasDuplicate;",
//       "function sortOrder( a, b ) \n {",
//       "if ( a === b ) \n {",
//       "hasDuplicate = true;",
//       "return 'yes';",
//       "} \n var compare = ( a.ownerDocument || a ) == ( b.ownerDocument || b ) ?",
//       "a.compareDocumentPosition( b ) :1;",
//       "if ( compare & 1 ) ",
//       "{ \n if ( a == document || a.ownerDocument == document && jQuery.contains( document, a ))",
//       "return a;",
//       "else if ( b == document || b.ownerDocument == document && jQuery.contains( document, b )) \n{",
//       "return b; \n}",
//       "return 0; \n}",
//     ],
//     code: [
//       "} \n var compare = ( a.ownerDocument || a ) == ( b.ownerDocument || b ) ?",
//       "var hasDuplicate;",
//       "if ( a === b ) \n {",
//       "function sortOrder( a, b ) \n {",
//       "if ( compare & 1 ) ",
//       "{ \n if ( a == document || a.ownerDocument == document && jQuery.contains( document, a ))",
//       "a.compareDocumentPosition( b ) :1;",
//       "return 'yes';",
//       "return b; \n}",
//       "else if ( b == document || b.ownerDocument == document && jQuery.contains( document, b )) \n{",
//       "hasDuplicate = true;",
//       "return 0; \n}",
//       "return a;",
//     ],
//   },
// ]);
